{
    "problemID": "placing",
        "title": "Placing Gazebos",
        "text": "Thomas has collected the necessary bricks and is about to build a gazebo, mostly because he thinks the word is fun to say.  He doesn’t quite know how large he will make it, but he knows the gazebo will be a square.  Before he builds his gazebo, he wants to do some planning and would like to know in how many places he can build it. \n\nThomas has modeled his backyard as an axis aligned n by n square grid with some free cells (represented by ‘.’) and some occupied cells (represented by ‘#’).  To ensure optimal gazebo placement, he has some self-imposed rules: \n- The gazebo must be axis-aligned relative to the yard (that is, one of its sides must be parallel to the vertical or horizontal axis). \n- No part of the gazebo can be built outside of the yard. \n- If the gazebo covers some portion of a yard cell, then it must cover all of it. \n- No part of the gazebo may overlap an occupied cell. \n\nBefore committing to building a gazebo with a specific size, Thomas wants to know for every possible size of gazebo he could build (fitting within his yard, of course) how many unique locations he could build a gazebo of that size.",
        "problem": "Given a model of the yard, report the number of potential gazebo placements for each possible size of gazebo to be built.",
        "input": "The first line will contain a single integer, $n$ ($1 \\leq n \\leq 1000$), representing the side length of the yard.  The following n lines will each contain n characters (either ‘.’ or ‘#’), which represents the yard's layout.",
        "output": "Output $n$ lines, each containing a single integer such that the $k^{th}$ ($1 \\leq k \\leq n$) line represents the number of places in which a $k \\times k$ gazebo can be placed. ",
        "sampleData": [
        {
            "input": "6\n#...#.\n.#....\n...#..\n......\n.....#\n..##.. ",
            "output": "29\n10\n1\n0\n0\n0"
        },
        {
            "input": "3\n...\n..#\n...",
            "output": "8\n2\n0"
        }
        ],
        "tags": ["Dynamic Programming", "Binary Search", "Prefix Sums"],
        "resources": [
        {
            "name": "Dynamic Programming",
            "url": "https://ofast.io/learn/dynamic-programming/recursive-functions"
        }
        ]
}